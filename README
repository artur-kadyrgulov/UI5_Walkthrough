Application created based on the tutorial 'Walkthrough Tutorial' UI5 

Step 0: Preparation.
    - Create app root folder. In my case it is 'UI5_WALKRTHROUGH'.
    - Go to the created folder.
    - Open terminal and execute 'npm install --global @ui5/cli'.

Step 1: Hello World.
    - Created index.html
    - Created manifext.json
        The manifest.json file defines static information about the application, such as the name of the application or the location of various files.
        [text](https://ui5.sap.com/sdk/#/topic/be0cf40f61184b358b5faedaec98b2da.html#loiobe0cf40f61184b358b5faedaec98b2da/section_sap_app)
    - Execute 'npm i -D @ui5/cli' to install UI Tooling.
    - Execute 'ui5 init'.
    - Execute 'npm start'.

Step 2: Bootstrap.
    - Open a terminal from the app root folder. 
    - Execute 'ui5 use OpenUI5'.
    - Execute 'ui5 add sap.ui.core sap.m themelib_sap_horizon'.
    - We tell SAPUI5 taht resources in the kadyrgulov.walkthrough are located in the same folder as index.html

Step 3: Controls.
    [text](https://sapui5.hana.ondemand.com/#/entity/sap.m.Text)

Step 4: XML Views.
    - It's about XML Views
        [text](https://sapui5.hana.ondemand.com/sdk/#/topic/91f292806f4d1014b6dd926db0e91070)
    - It's about sap.ui.core.mvc.View
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui.core.mvc.View%23overview)

Step 5: Controllers.
    - It's about Controllers
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui.core.mvc.Controller%23methods/sap.ui.core.mvc.Controller.extend)
    - Be careful when specifying the name of the view. Controllers carry the same name as the related view (if there is a 1:1 relationship)

Step 6: Modules.
    - It's about 'MessageToast'
        [text](https://sapui5.hana.ondemand.com/#/api/sap.m.MessageToast%23overview)
    - Use 'sap.ui.define' for controllers and all other JavaScript modules to define a global namespace. With the namespace, the object can be addressed throughout the application.
    - Use 'sap.ui.require' for asynchronously loading dependencies but without declaring a namespace, for example code that just needs to be executed, but does not need to be called from other code.
    - Use the name of the artifact to load for naming the function parameters (without namespace).

Step 7: JSON Model.
    - We add an onInit function to the controller. This is one of SAPUI5’s lifecycle methods that is invoked by the framework when the controller is created, similar to the constructor of a control.
    - The curly brackets {…} indicate that data is taken from the value of the recipient's object name property. This is called "data binding".
    - It's about 'Labels, headings, and descriptions help you describe the contents and visual elements of an application'.
        [text](https://sapui5.hana.ondemand.com/sdk/#/topic/33fae3482358438e93daea5232527093)

Step 8: Translatable Texts.
    - It's about 'ResourceBundle'
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/module:sap/base/i18n/ResourceBundle%23methods)
    - It's about 'ResourseModel'
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui.model.resource.ResourceModel%23overview)
    - In this tutorial we will only have one properties file. However, in real-world projects, you would have a separate file for each supported language with a suffix for the locale, for example i18n_de.properties for German, i18n_en.properties for English, and so on.

Step 9: Component Configuration.
    - Components are independent and reusable parts used in SAPUI5 applications.

Step 10: Descriptor for Applications.
    - The content of the manifest.json file is a configuration object in JSON format that contains all global application settings and parameters. 
    - We can delete our index.js, because the descriptor now takes care of everything.

Step 11: Pages and Panels.
    - In order to make the fullscreen height of the view work properly, we add the displayBlock attribute with the value true to the view.
    - It's about properties of pages and panels
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/sap.m.Page%23controlProperties)

Step 12: Shell Control as Container.
    - The shell takes care of visual adaptation of the application to the device’s screen size by introducing a so-called letterbox on desktop screens.
    - The shell control is now the outermost control of our app and automatically displays a so-called letterbox, if the screen size is larger than a certain width.
    - There are further options to customize the shell, like setting a custom background image or color and setting a custom logo.
    - It's about 'Shell'
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/sap.m.Shell%23controlProperties)

Step 13: Margins and Paddings.
    - It's about predefined css margin classes
        [text](https://sapui5.hana.ondemand.com/sdk/#/topic/777168ffe8324873973151dae2356d1c)
    
Step 14: Custom CSS and Theme Colors.
    - It's about theming
        [text](https://sapui5.hana.ondemand.com/sdk/#/entity/sap.ui.core.theming)

Step 15: Nested Views.
    - Move the panel content to a separate view.

Step 16: Dialogs and Fragments.
    - Fragments can be reused.
    - Fragments do not have any controller.

Step 17: Fragment Callbacks.
    - Samples of dialog
        [text](https://sapui5.hana.ondemand.com/#/entity/sap.m.Dialog)
    
Step 18: Icons.
    - All icons
        [text](https://sapui5.hana.ondemand.com/sdk/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons/?tab=grid&icon=accept)

Step 19: Aggregation Binding.
    - Samples of List
        [text](https://sapui5.hana.ondemand.com/sdk/#/entity/sap.m.List)

Step 20: Data Types
Step 21: Expression Binding
    - It's about ObjectListItem
        [text](https://sapui5.hana.ondemand.com/sdk/#/api/sap.m.ObjectListItem%23controlProperties)